Иcпользуем концепцию CRUD (Create, read, update, delete)

Endpoints

    Authentification
    POST /auth/sign-up
    POST /auth/sign-in

    Requests
        SCA
            POST    /sca/start     (Запускается сканирование, в запросе указывается id проекта, возращается id сканирования)
            GET     /sca/status    (Возвращается статус сканирования, в запрсе указывается id проекта и id сканирования)
            GET     /sca/list       (В запросе указывается id проекта, возвращается список всех сканов sca из этого проекта)
            GET     /sca/list/{ID}  (В запросе указывается id проекта)

        SAST
            POST    /sast/start
            GET     /sast/status
            GET     /sast/get
            GET     /sast/get/{ID}

        Project
            GET     /project        (Возвращается список проектов пользователя)
            GET     /project/{ID}   (Возвращается описание проета пользователя)
            POST    /project        (Создается проект пользователя)
            DELETE  /project/{ID}   (Удаляется проект пользователя)


1. Аутентификация
    Каждый пользователь проходит регистрацию и для него генерируется jwt tocken
    С этим токеном он выполняет запросы к SCA и SAST
    Запись в базу данных связей пользователь + проекты

    Необходимо интеграция с SSO банка и валидация пользователь + проект (как вариант валидация отношения пользователя к проекту который он хочет сканировать)
    Необходим механизм добавления нового проекта для пользователя

2. SAST
    Реализация ожидания результатов сканирования. Возможно сбор статистики по скорости сканирования для каждокого проекта
    В последствие оптимизация интервалов опроса SAST
    Хранение в базе данных истории сканирования для каждого проекта (id сканирования + верси). Возможно использование s3 для генерации ссылки на отчет.
    Получение общего статуса сканирования, описание кретериев для разных статусов.
    Генерация задач по уязвимостям найденым по итогу сканирования


Бизнес сущности находятся в корне приложения
repository - работа с бд
service - бизнес логика (use case)
handler - работы с http 

http заропс -> handler -> service -> repository

Коммуникации между слоями происходят с помощью интерфейсов.

Нужно не забыть написать инструкцию или скрипт по созданию базы для приложения
Реализовать автогенерацию salt
Проверить на возможность sqli

jwt token протухнет через 12 часов
При передаче не валидных значений в полях пароля и имени пользователя возвращать ошибку
Проработать проверку полей аутентификации

Сделать валидацию полей вводимых пользователем


SWAGGER
https://github.com/swaggo/gin-swagger
```go install github.com/swaggo/swag/cmd/swag@latest```

https://github.com/swaggo/swag
export PATH="$PATH:$GOBIN"
export GOPATH=$HOME/go
export GOBIN=$GOPATH/bin